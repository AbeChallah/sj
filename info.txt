/Users/abechallah/desktop/startup_journal/
source sj_env/bin/activate 

/Users/abechallah/desktop/startup_journal/startup_journal
python manage.py runserver 127.0.0.1:8001



URLs to test for authentication:

http://127.0.0.1:8001/entries/
http://127.0.0.1:8001/entry/43/
http://127.0.0.1:8001/edit_entry/43/
http://127.0.0.1:8001/date/2023-04-03/
http://127.0.0.1:8001/tag/targets/
http://127.0.0.1:8001/new_entry/
http://127.0.0.1:8001/search/
http://127.0.0.1:8001/search/?query=kukuru
http://127.0.0.1:8001/search/?query=admin


      <a href="{% url "journal_entry:entries" %}"><input type="submit" value="Cancel"></a>




  display: inline-block;


Put back in registration template
    <!--{% bootstrap_form form %} -->


forms.py (I think it was wrong)


from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User

class EmailUserCreationForm(UserCreationForm):
    email = forms.EmailField(required=True)

    class Meta:
        model = User
        fields = ['email', 'password1', 'password2']

    def save(self, commit=True):
        user = super().save(commit=False)
        user.username = self.cleaned_data['email']
        if commit:
            user.save()
        return user





from django import forms
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth import get_user_model

class EmailAuthenticationForm(AuthenticationForm):
    email = forms.EmailField(required=True)

    class Meta:
        model = get_user_model()
        fields = ['email', 'password']

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['username'] = forms.CharField(
            label='Email',
            widget=forms.TextInput(attrs={'autofocus': True})
        )

    def clean(self):
        email = self.cleaned_data.get('email')
        password = self.cleaned_data.get('password')

        if email and password:
            self.user_cache = authenticate(
                self.request, username=email, password=password
            )
            if self.user_cache is None:
                raise self.get_invalid_login_error()
            else:
                self.confirm_login_allowed(self.user_cache)

        return self.cleaned_data
